name: Build Nokia 4.4 KSU

on:
  workflow_dispatch:

    inputs:
      KERNEL_SOURCE:
        description: 'Kernel Source'
        required: true
        default: 'LineageOS/android_kernel_nokia_sdm660'
      KERNEL_SOURCE_BRANCH:
        description: 'Branch'
        required: true
        default: 'lineage-20'
      KERNEL_DEFCONFIG:
        description: 'Defconfig'
        required: true
        default: 'nokia_defconfig'
      KERNEL_FILE:
        description: 'Your kernel out image name'
        required: true
        default: 'Image.gz-dtb'
      CLANG_URL:
        description: 'Clang URL'
        required: true
        default: 'https://github.com/ZyCromerZ/Clang/releases/download/14.0.6-20231003-release/Clang-14.0.6-20231003.tar.gz'


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    
    - name: Setup Configuration
      run: |
        echo "KERNEL_SOURCE=${{ github.event.inputs.KERNEL_SOURCE }}" >> $GITHUB_ENV
        echo "KERNEL_SOURCE_BRANCH=${{ github.event.inputs.KERNEL_SOURCE_BRANCH }}" >> $GITHUB_ENV
        echo "KERNEL_DEFCONFIG=${{ github.event.inputs.KERNEL_DEFCONFIG }}" >> $GITHUB_ENV
        echo "KERNEL_FILE=${{ github.event.inputs.KERNEL_FILE }}" >> $GITHUB_ENV
        echo "CLANG_URL=${{ github.event.inputs.CLANG_URL }}" >> $GITHUB_ENV
    
    - name: Setup build kernel environment
      run: |
        echo "BUILD_TIME=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")" >> $GITHUB_ENV
        sudo apt-get update
        sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 python3

    - name: Download Clang Toolchain
      run: |
        mkdir clang
        wget -q ${{ env.CLANG_URL }} -O clang.tar.gz
        tar -C clang/ -zxf clang.tar.gz


    - name: Checkout Kernel Source
      uses: actions/checkout@v4
      with:
        github-server-url: 'https://github.com'
        repository: ${{ env.KERNEL_SOURCE }}
        ref: ${{ env.KERNEL_SOURCE_BRANCH }}
        path: project
        submodules: recursive
        fetch-depth: 1
            
    - name: Setup KernelSU
      run: |
        git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git
        cd AnyKernel3
        sed -i 's/do.devicecheck=1/do.devicecheck=0/' anykernel.sh
        sed -i 's/is_slot_device=0/is_slot_device=1/' anykernel.sh
        sed -i 's/block=\/dev\/block\/platform\/omap\/omap_hsmmc\.0\/by-name\/boot/block=\/dev\/block\/bootdevice\/by-name\/boot/' anykernel.sh
        cd ..
        cd project
        wget https://github.com/La-Hire/My_KSU_Action/raw/main/nokia_ksu.patch
        git apply nokia_ksu.patch
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main
        echo "$(cd KernelSU && git rev-list --count HEAD)" > ksu_version.txt
        KSU_VERSION="$(($(cat ksu_version.txt) + 10200))"
        echo "KSUVer=$KSU_VERSION" >> $GITHUB_ENV
              
    - name: Build kernel
      run: |
        cd project
        export PATH=$GITHUB_WORKSPACE/clang/bin:$PATH
        export ARCH=arm64
        export SUBARCH=arm64
        git config --global user.email "bot@example.com"
        git config --global user.name "bot"
        make O=out CC=clang ARCH=arm64 ${{ env.KERNEL_DEFCONFIG }}
        yes "" | make O=out ARCH=arm64 CC=clang CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_COMPAT=arm-linux-gnueabi-
        cp out/arch/arm64/boot/Image* $GITHUB_WORKSPACE/AnyKernel3
        
    - name: Upload the kernel zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.KSUVer }}_Nokia_4.4_${{ env.BUILD_TIME}}
        path: AnyKernel3/*
