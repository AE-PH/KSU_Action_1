name: Build Lavender 4.19 KSU

on:
  workflow_dispatch:

    inputs:
      KERNEL_SOURCE:
        description: 'Kernel Source'
        required: true
        default: 'RedmiNote7-Series/4.19_kernel_xiaomi_sdm660'
      KERNEL_SOURCE_BRANCH:
        description: 'Branch'
        required: true
        default: '14.0'
      KERNEL_DEFCONFIG:
        description: 'Defconfig'
        required: true
        default: 'lavender_defconfig'
      KERNEL_FILE:
        description: 'Your kernel out image name'
        required: true
        default: 'Image.gz-dtb'
      AK3_SOURCE:
        description: 'AnyKernel3 Source'
        required: true
        default: 'https://github.com/ImSpiDy/AnyKernel3'
      CLANG_URL:
        description: 'Clang URL'
        required: true
        default: 'https://github.com/ZyCromerZ/Clang/releases/download/16.0.6-20240303-release/Clang-16.0.6-20240303.tar.gz'


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
          fetch-depth: 0
          
    - name: Setup Configuration
      run: |
        echo "KERNEL_SOURCE=${{ github.event.inputs.KERNEL_SOURCE }}" >> $GITHUB_ENV
        echo "KERNEL_SOURCE_BRANCH=${{ github.event.inputs.KERNEL_SOURCE_BRANCH }}" >> $GITHUB_ENV
        echo "KERNEL_DEFCONFIG=${{ github.event.inputs.KERNEL_DEFCONFIG }}" >> $GITHUB_ENV
        echo "KERNEL_FILE=${{ github.event.inputs.KERNEL_FILE }}" >> $GITHUB_ENV
        echo "AK3_SOURCE=${{ github.event.inputs.AK3_SOURCE }}" >> $GITHUB_ENV
        echo "CLANG_URL=${{ github.event.inputs.CLANG_URL }}" >> $GITHUB_ENV
    
    - name: Setup build kernel environment
      run: |
        echo "BUILD_TIME=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")" >> $GITHUB_ENV
        sudo apt-get update
        sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 python3

    - name: Download AK3_SOURCE
      run: |
        git clone --depth=1 https://github.com/ImSpiDy/AnyKernel3 AnyKernel3

    - name: Download Clang Toolchain
      run: |
        mkdir clang
        wget -q ${{ env.CLANG_URL }} -O clang.tar.gz
        tar -C clang/ -zxf clang.tar.gz


    - name: Checkout Kernel Source
      uses: actions/checkout@v4
      with:
        github-server-url: 'https://github.com'
        repository: ${{ env.KERNEL_SOURCE }}
        ref: ${{ env.KERNEL_SOURCE_BRANCH }}
        path: project
        submodules: recursive
        fetch-depth: 1
            
    - name: Setup KernelSU
      run: |
        cd project
        git apply ../path_umount.patch
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -
        echo "CONFIG_KSU=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
        echo "CONFIG_KALLSYMS_ALL=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
        echo "CONFIG_DEBUG_KERNEL=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
        echo "$(cd KernelSU && git rev-list --count HEAD)" > ksu_version.txt
        KSUV="ccflags-y += -DKSU_VERSION=$(($(cat ksu_version.txt) + 10200))"
        KSU_VERSION="$(($(cat ksu_version.txt) + 10200))"
        echo "KSUVer=$KSU_VERSION" >> $GITHUB_ENV
              
    - name: Build kernel
      run: |
        cd project
        export PATH=$GITHUB_WORKSPACE/clang/bin:$PATH
        export ARCH=arm64
        export SUBARCH=arm64
        git config --global user.email "bot@example.com"
        git config --global user.name "bot"
        make O=out CC=clang ARCH=arm64 ${{ env.KERNEL_DEFCONFIG }}
        yes "" | make O=out ARCH=arm64 LLVM=1 LLVM_IAS=1 CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-android- CROSS_COMPILE_COMPAT=arm-linux-androideabi- AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip
        cp project/out/arch/arm64/boot/${{ env.KERNEL_FILE }} $GITHUB_WORKSPACE/AnyKernel3
        cd $GITHUB_WORKSPACE/AnyKernel3
        rm -rf .github
        rm banner
        rm README.md
        rm LICENSE
        
    - name: Upload the kernel zip
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.KSUVer }}_Lavender_4.19_${{ env.BUILD_TIME}}
        path: AnyKernel3/*
          
          
